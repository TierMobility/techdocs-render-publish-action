name: Render & Publish TechDocs
description: Extracts Backstage entitiy information from a catalog file, renders TechDocs static HTML and publishes the generated files

inputs:
  path:
    description: "Path to catalog file containing the techdocs-ref annoated entity"
    required: false
    default: catalog-info.yaml
  entity_kind:
    description: "Enity kind that contains the techdocs-ref annotation"
    required: false
    default: Component
  bucket_name:
    description: "Name of the AWS/Azure/GCS bucket to publish to"
    required: true
  aws_access_key_id:
    description: "AWS S3 bucket access key ID"
    required: true
  aws_secret_access_key:
    description: "AWS S3 bucket secret access key"
    required: true
  aws_region:
    description: "AWS region of the bucket to publish to"
    required: false
    default: eu-central-1

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v3
    - id: install-pyyaml
      name: Install PyYAML library
      shell: bash
      run: |
        pip install PyYAML==6.0
    - id: extract-entity-info
      name: Extract entity information from catalog file
      shell: python
      run: |
        import sys
        import yaml
        from pathlib import Path

        path = Path("${{ inputs.path }}")
        with path.open(mode="r") as fp:
          catalog_data = list(yaml.safe_load_all(fp))

        kind_matches = [entity for entity in catalog_data if entitiy["kind"] == "${{ inputs.entity_kind }}"]
        if len(kind_matches) > 1:
          print("Found more than one entity of kind `${{ inputs.entity_kind }}` in `${{ inputs.path }}`")
          sys.exit(1)
        elif len(kind_matches) == 0:
          print("Found no entity of kind `${{ inputs.entity_kind }}` in `${{ inputs.path }}`")
          sys.exit(1)
        entity = kind_matches[0]

        name = entity["metadata"]["name"]
        if not name:
          print("Empty `metadata.name` in `${{ inputs.path }}`")
          sys.exit(1)
        print(f"::set-output name=name::{name}")
        namepsace = entity["metadata"].get("namespace", "default")
        if not namespace: 
          print("Empty `metadata.namespace` in `${{ inputs.path }}`")
          sys.exit(1)
        print(f"::set-output name=namespace::{namespace}")
    - uses: actions/setup-node@v3
    - name: install-techdocs-cli
      shell: bash
      run: sudo npm install -g @techdocs/cli
    - id: install-mkdocs
      name: Install mkdocs and custom mkdocs core plugin
      shell: bash
      run: |
        pip install tier-mkdocs-techdocs-core==0.0.8
    - id: create-bridge-network
      name: Create docker bridge network
      shell: bash
      run: docker network create --driver bridge kroki-net
    - id: start-kroki-mermaid
      name: Start kroki mermaid helper container
      shell: bash
      run: docker run -d --rm --expose 8002 --name kroki-mermaid --network kroki-net yuzutech/kroki-mermaid
    - id: start-kroki-core
      name: Start kroki core container
      shell: bash
      run: docker run -d --rm -p 8000:8000 -e KROKI_MERMAID_HOST=kroki-mermaid --name kroki-core --network kroki-net yuzutech/kroki
    - id: render-docs
      name: Render TechDocs
      shell: bash
      run: techdocs-cli generate --no-docker --omitTechdocsCoreMkdocsPlugin --verbose
      env:
        KROKI_SERVER_URL: "http://127.0.0.1:8000"
        KROKI_DOWNLOAD_IMAGES: "1"
    - id: publish-docs
      name: Publish rendered TechDocs to S3
      shell: bash
      run: techdocs-cli publish --publisher-type awsS3 --storage-name ${{ inputs.bucket_name }} --entity ${{ steps.extract-entity-info.outputs.entity_namespace }}/${{ steps.extract-entity-info.outputs.entity_kind }}/${{ steps.extract-entity-info.outputs.entity_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.aws_region }}
    - id: stop-kroki
      name: Stop kroki containers
      shell: bash
      run: docker stop kroki-core kroki-mermaid
    - id: remove-bridge-network
      name: Remove docker bridge network
      shell: bash
      run: docker network rm kroki-net
